<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.creditharmony.fortune.customer.workflow.dao.TransferRelationDao" >
  <resultMap id="BaseResultMap" type="com.creditharmony.fortune.customer.workflow.entity.TransferRelation" >
    <result column="id" property="id" jdbcType="VARCHAR" />
    <result column="lend_code_parent" property="lendCodeParent" jdbcType="VARCHAR" />
    <result column="lend_code_childe" property="lendCodeChilde" jdbcType="VARCHAR" />
    <result column="back_money" property="backMoney" jdbcType="NUMERIC" />
    <result column="transfer_money" property="transferMoney" jdbcType="NUMERIC" />
    <result column="back_money_type" property="backMoneyType" jdbcType="VARCHAR" />
    <result column="transfer_state" property="transferState" jdbcType="VARCHAR" />
    <result column="create_by" property="createBy" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="modify_time" property="modifyTime" jdbcType="TIMESTAMP" />
    <result column="modify_by" property="modifyBy" jdbcType="VARCHAR" />
    <result column="childLendStatus" property="childLendStatus" jdbcType="VARCHAR" />
    
  </resultMap>
  
  <insert id="insert" parameterType="com.creditharmony.fortune.customer.workflow.entity.TransferRelation" >
    insert into t_tz_transfer_relation (id, lend_code_parent, lend_code_childe, 
      back_money, transfer_money, back_money_type, 
      transfer_state, create_by, create_time, 
      modify_time, modify_by)
    values (#{id,jdbcType=VARCHAR}, #{lendCodeParent,jdbcType=VARCHAR}, #{lendCodeChilde,jdbcType=VARCHAR}, 
      #{backMoney,jdbcType=NUMERIC}, #{transferMoney,jdbcType=NUMERIC}, #{backMoneyType,jdbcType=VARCHAR}, 
      #{transferState,jdbcType=VARCHAR}, #{createBy,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{modifyTime,jdbcType=TIMESTAMP}, #{modifyBy,jdbcType=VARCHAR})
  </insert>
  
  <update id="update" parameterType="com.creditharmony.fortune.customer.workflow.entity.TransferRelation" >
    update tz.t_tz_transfer_relation
    <set>
      <if test="lendCodeParent != null" >
        lend_code_parent=#{lendCodeParent,jdbcType=VARCHAR},
      </if>
      <if test="lendCodeChilde != null" >
        lend_code_childe=#{lendCodeChilde,jdbcType=VARCHAR},
      </if>
      <if test="backMoney != null" >
        back_money=#{backMoney,jdbcType=NUMERIC},
      </if>
      <if test="transferMoney != null" >
        transfer_money=#{transferMoney,jdbcType=NUMERIC},
      </if>
      <if test="backMoneyType != null" >
        back_money_type=#{backMoneyType,jdbcType=VARCHAR},
      </if>
      <if test="transferState != null" >
        transfer_state=#{transferState,jdbcType=VARCHAR},
      </if>
      <if test="modifyTime != null" >
        modify_time=#{modifyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyBy != null" >
        modify_by=#{modifyBy,jdbcType=VARCHAR},
      </if>
    </set>
    <where>
    	<if test="id != '' and id != null">
    		id=#{id,jdbcType=VARCHAR}
    	</if>
    </where>
  </update>
  
  <select id="findList" parameterType="java.util.HashMap" resultMap="BaseResultMap">
  	select r.* 
  	from tz.t_tz_loan_apply a 
  	 join tz.t_tz_transfer_relation r  on r.lend_code_childe = a.lend_code
  	<where>
  		<if test="childLendCode != '' and childLendCode != null">
    		 a.lend_code=#{childLendCode,jdbcType=VARCHAR}
    	</if>
    	<if test="customerCode != '' and customerCode != null">
    		a.customer_code=#{customerCode,jdbcType=VARCHAR}
    	</if>
  	</where>
  </select>
  
  <!-- 查询内转子项对应的出借申请单的状态  -->
  <select id="getLendRelationInfo4Apply" parameterType="java.util.HashMap" resultMap="BaseResultMap">
  	select relat.*, app.lend_status as childLendStatus 
    from  tz.t_tz_transfer_relation  relat
    	left join tz.t_tz_loan_apply app on relat.lend_code_parent = app.lend_code
    where app.customer_code=#{customerCode,jdbcType=VARCHAR}
  </select>
  
  <!-- 查找xxx出借被内转的数量（使用中）  -->
  <select id="getUsingTransCount"   parameterType="java.util.Map"  resultType="Integer">
  	select count(1)
	from tz.t_tz_transfer_relation tr 
	where tr.lend_code_parent = #{lendCodeP} and transfer_state not in ('2','3','4')
	and tr.lend_code_childe != #{lendCodeC}
  </select>
  
  <!-- 更改内转关系表的状态 -->
  <update id="updateTransferStatus">
	  	update tz.t_tz_transfer_relation 
		   set transfer_state = #{transferState},
		   modify_time = sysdate,
		   modify_by = #{modifyBy}
		where    lend_code_childe = #{lendCodeC}
		<if test="lendCodeP != null and lendCodeP != '' ">
		  and lend_code_parent = #{lendCodeP}
		</if>
  </update>
  
  <!--根据子编号，删除数据  -->
  <delete id="deleteByChildLendCode"   parameterType="String">
  	delete from tz.t_tz_transfer_relation tr where tr.lend_code_childe = #{lendCodeC}
  </delete>
  <select id="getTransCount" resultType="Integer">
	select count(1) from 
	t_tz_transfer_relation 
	where lend_code_parent=#{lendCode}
	and transfer_state in ('0','1','2')
  </select>
  
  <select id="countTransferRelation" parameterType="java.util.Map" resultType="int">
		SELECT
    		COUNT(*)
		FROM 
			T_TZ_TRANSFER_RELATION
		WHERE 
			lend_code_parent = #{lendCode} 
			AND 
				(
					transfer_state NOT IN 
			    	<foreach collection="statusList" item="item" index="index" open="(" separator="," close=")">
			    		#{item}
			    	</foreach>
			    	OR transfer_state IS NULL
			    )
	</select>
	
	<select id="getByLendCode" parameterType="java.lang.String" resultType="com.creditharmony.fortune.back.money.common.entity.BackMoneyPool">
		select
			backm_id, 
			lend_code, 
			final_linit_date, 
			back_money_type, 
			dict_back_status, 
			nvl(back_money,0) back_money, 
			nvl(back_actualback_money,0) back_actualback_money, 
			back_money_remarks, 
			back_money_day, 
			dict_back_money_error, 
			platform_id, 
			create_by, 
			create_time, 
			modify_by, 
			modify_time, 
			back_result, 
			back_reason, 
			back_day, 
			back_bank, 
			reback_flag, 
			success_money, 
			fail_money,
			dict_fortunechannelflag,
			nvl(supplemented_money,0) supplemented_money,
			debt_transfer_date,
			is_supplemented,
			working_state,
			extract(epoch from modify_time) as "verTime"
		from
			t_tz_back_money_pool
		where
			lend_code=#{lendCode}
	</select>
</mapper>